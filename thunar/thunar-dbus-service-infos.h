/* Generated by dbus-binding-tool; do not edit! */


#ifndef __dbus_glib_marshal_thunar_dbus_service_MARSHAL_H__
#define __dbus_glib_marshal_thunar_dbus_service_MARSHAL_H__

#include	<glib-object.h>

G_BEGIN_DECLS

#ifdef G_ENABLE_DEBUG
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_char(v)     g_value_get_schar (v)
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#define g_marshal_value_peek_variant(v)  g_value_get_variant (v)
#else /* !G_ENABLE_DEBUG */
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
 *          Do not access GValues directly in your code. Instead, use the
 *          g_value_get_*() functions
 */
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_variant(v)  (v)->data[0].v_pointer
#endif /* !G_ENABLE_DEBUG */


/* BOOLEAN:STRING,STRING,STRING,STRING,POINTER */
extern void dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_STRING_STRING_POINTER (GClosure     *closure,
                                                                                                GValue       *return_value,
                                                                                                guint         n_param_values,
                                                                                                const GValue *param_values,
                                                                                                gpointer      invocation_hint,
                                                                                                gpointer      marshal_data);
void
dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_STRING_STRING_POINTER (GClosure     *closure,
                                                                                    GValue       *return_value G_GNUC_UNUSED,
                                                                                    guint         n_param_values,
                                                                                    const GValue *param_values,
                                                                                    gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                    gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_STRING_STRING_STRING_POINTER) (gpointer     data1,
                                                                                 gpointer     arg_1,
                                                                                 gpointer     arg_2,
                                                                                 gpointer     arg_3,
                                                                                 gpointer     arg_4,
                                                                                 gpointer     arg_5,
                                                                                 gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_STRING_STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 6);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_STRING_STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_string (param_values + 3),
                       g_marshal_value_peek_string (param_values + 4),
                       g_marshal_value_peek_pointer (param_values + 5),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,BOXED,BOXED,STRING,STRING,POINTER */
extern void dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_BOXED_STRING_STRING_POINTER (GClosure     *closure,
                                                                                                     GValue       *return_value,
                                                                                                     guint         n_param_values,
                                                                                                     const GValue *param_values,
                                                                                                     gpointer      invocation_hint,
                                                                                                     gpointer      marshal_data);
void
dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_BOXED_STRING_STRING_POINTER (GClosure     *closure,
                                                                                         GValue       *return_value G_GNUC_UNUSED,
                                                                                         guint         n_param_values,
                                                                                         const GValue *param_values,
                                                                                         gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                         gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_BOXED_BOXED_STRING_STRING_POINTER) (gpointer     data1,
                                                                                      gpointer     arg_1,
                                                                                      gpointer     arg_2,
                                                                                      gpointer     arg_3,
                                                                                      gpointer     arg_4,
                                                                                      gpointer     arg_5,
                                                                                      gpointer     arg_6,
                                                                                      gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_BOXED_BOXED_STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 7);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_BOXED_BOXED_STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_boxed (param_values + 2),
                       g_marshal_value_peek_boxed (param_values + 3),
                       g_marshal_value_peek_string (param_values + 4),
                       g_marshal_value_peek_string (param_values + 5),
                       g_marshal_value_peek_pointer (param_values + 6),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:POINTER,POINTER */
extern void dbus_glib_marshal_thunar_dbus_service_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                                            GValue       *return_value,
                                                                            guint         n_param_values,
                                                                            const GValue *param_values,
                                                                            gpointer      invocation_hint,
                                                                            gpointer      marshal_data);
void
dbus_glib_marshal_thunar_dbus_service_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                                GValue       *return_value G_GNUC_UNUSED,
                                                                guint         n_param_values,
                                                                const GValue *param_values,
                                                                gpointer      invocation_hint G_GNUC_UNUSED,
                                                                gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER_POINTER) (gpointer     data1,
                                                             gpointer     arg_1,
                                                             gpointer     arg_2,
                                                             gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:POINTER */
extern void dbus_glib_marshal_thunar_dbus_service_BOOLEAN__POINTER (GClosure     *closure,
                                                                    GValue       *return_value,
                                                                    guint         n_param_values,
                                                                    const GValue *param_values,
                                                                    gpointer      invocation_hint,
                                                                    gpointer      marshal_data);
void
dbus_glib_marshal_thunar_dbus_service_BOOLEAN__POINTER (GClosure     *closure,
                                                        GValue       *return_value G_GNUC_UNUSED,
                                                        guint         n_param_values,
                                                        const GValue *param_values,
                                                        gpointer      invocation_hint G_GNUC_UNUSED,
                                                        gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER) (gpointer     data1,
                                                     gpointer     arg_1,
                                                     gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 2);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,STRING,STRING,POINTER */
extern void dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_STRING_POINTER (GClosure     *closure,
                                                                                         GValue       *return_value,
                                                                                         guint         n_param_values,
                                                                                         const GValue *param_values,
                                                                                         gpointer      invocation_hint,
                                                                                         gpointer      marshal_data);
void
dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_STRING_POINTER (GClosure     *closure,
                                                                             GValue       *return_value G_GNUC_UNUSED,
                                                                             guint         n_param_values,
                                                                             const GValue *param_values,
                                                                             gpointer      invocation_hint G_GNUC_UNUSED,
                                                                             gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_STRING_STRING_POINTER) (gpointer     data1,
                                                                          gpointer     arg_1,
                                                                          gpointer     arg_2,
                                                                          gpointer     arg_3,
                                                                          gpointer     arg_4,
                                                                          gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 5);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_string (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,BOXED,BOOLEAN,STRING,STRING,POINTER */
extern void dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_BOOLEAN_STRING_STRING_POINTER (GClosure     *closure,
                                                                                                       GValue       *return_value,
                                                                                                       guint         n_param_values,
                                                                                                       const GValue *param_values,
                                                                                                       gpointer      invocation_hint,
                                                                                                       gpointer      marshal_data);
void
dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_BOOLEAN_STRING_STRING_POINTER (GClosure     *closure,
                                                                                           GValue       *return_value G_GNUC_UNUSED,
                                                                                           guint         n_param_values,
                                                                                           const GValue *param_values,
                                                                                           gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                           gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_BOXED_BOOLEAN_STRING_STRING_POINTER) (gpointer     data1,
                                                                                        gpointer     arg_1,
                                                                                        gpointer     arg_2,
                                                                                        gboolean     arg_3,
                                                                                        gpointer     arg_4,
                                                                                        gpointer     arg_5,
                                                                                        gpointer     arg_6,
                                                                                        gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_BOXED_BOOLEAN_STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 7);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_BOXED_BOOLEAN_STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_boxed (param_values + 2),
                       g_marshal_value_peek_boolean (param_values + 3),
                       g_marshal_value_peek_string (param_values + 4),
                       g_marshal_value_peek_string (param_values + 5),
                       g_marshal_value_peek_pointer (param_values + 6),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:BOXED,STRING,STRING,POINTER */
extern void dbus_glib_marshal_thunar_dbus_service_BOOLEAN__BOXED_STRING_STRING_POINTER (GClosure     *closure,
                                                                                        GValue       *return_value,
                                                                                        guint         n_param_values,
                                                                                        const GValue *param_values,
                                                                                        gpointer      invocation_hint,
                                                                                        gpointer      marshal_data);
void
dbus_glib_marshal_thunar_dbus_service_BOOLEAN__BOXED_STRING_STRING_POINTER (GClosure     *closure,
                                                                            GValue       *return_value G_GNUC_UNUSED,
                                                                            guint         n_param_values,
                                                                            const GValue *param_values,
                                                                            gpointer      invocation_hint G_GNUC_UNUSED,
                                                                            gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__BOXED_STRING_STRING_POINTER) (gpointer     data1,
                                                                         gpointer     arg_1,
                                                                         gpointer     arg_2,
                                                                         gpointer     arg_3,
                                                                         gpointer     arg_4,
                                                                         gpointer     data2);
  register GMarshalFunc_BOOLEAN__BOXED_STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 5);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__BOXED_STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_boxed (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_string (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,BOXED,STRING,STRING,STRING,POINTER */
extern void dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_STRING_STRING_STRING_POINTER (GClosure     *closure,
                                                                                                      GValue       *return_value,
                                                                                                      guint         n_param_values,
                                                                                                      const GValue *param_values,
                                                                                                      gpointer      invocation_hint,
                                                                                                      gpointer      marshal_data);
void
dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_STRING_STRING_STRING_POINTER (GClosure     *closure,
                                                                                          GValue       *return_value G_GNUC_UNUSED,
                                                                                          guint         n_param_values,
                                                                                          const GValue *param_values,
                                                                                          gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                          gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_BOXED_STRING_STRING_STRING_POINTER) (gpointer     data1,
                                                                                       gpointer     arg_1,
                                                                                       gpointer     arg_2,
                                                                                       gpointer     arg_3,
                                                                                       gpointer     arg_4,
                                                                                       gpointer     arg_5,
                                                                                       gpointer     arg_6,
                                                                                       gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_BOXED_STRING_STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 7);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_BOXED_STRING_STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_boxed (param_values + 2),
                       g_marshal_value_peek_string (param_values + 3),
                       g_marshal_value_peek_string (param_values + 4),
                       g_marshal_value_peek_string (param_values + 5),
                       g_marshal_value_peek_pointer (param_values + 6),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,BOOLEAN,STRING,STRING,POINTER */
extern void dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOOLEAN_STRING_STRING_POINTER (GClosure     *closure,
                                                                                                 GValue       *return_value,
                                                                                                 guint         n_param_values,
                                                                                                 const GValue *param_values,
                                                                                                 gpointer      invocation_hint,
                                                                                                 gpointer      marshal_data);
void
dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOOLEAN_STRING_STRING_POINTER (GClosure     *closure,
                                                                                     GValue       *return_value G_GNUC_UNUSED,
                                                                                     guint         n_param_values,
                                                                                     const GValue *param_values,
                                                                                     gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                     gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_BOOLEAN_STRING_STRING_POINTER) (gpointer     data1,
                                                                                  gpointer     arg_1,
                                                                                  gboolean     arg_2,
                                                                                  gpointer     arg_3,
                                                                                  gpointer     arg_4,
                                                                                  gpointer     arg_5,
                                                                                  gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_BOOLEAN_STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 6);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_BOOLEAN_STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_boolean (param_values + 2),
                       g_marshal_value_peek_string (param_values + 3),
                       g_marshal_value_peek_string (param_values + 4),
                       g_marshal_value_peek_pointer (param_values + 5),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,STRING,BOXED,STRING,STRING,POINTER */
extern void dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_BOXED_STRING_STRING_POINTER (GClosure     *closure,
                                                                                                      GValue       *return_value,
                                                                                                      guint         n_param_values,
                                                                                                      const GValue *param_values,
                                                                                                      gpointer      invocation_hint,
                                                                                                      gpointer      marshal_data);
void
dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_BOXED_STRING_STRING_POINTER (GClosure     *closure,
                                                                                          GValue       *return_value G_GNUC_UNUSED,
                                                                                          guint         n_param_values,
                                                                                          const GValue *param_values,
                                                                                          gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                          gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_STRING_BOXED_STRING_STRING_POINTER) (gpointer     data1,
                                                                                       gpointer     arg_1,
                                                                                       gpointer     arg_2,
                                                                                       gpointer     arg_3,
                                                                                       gpointer     arg_4,
                                                                                       gpointer     arg_5,
                                                                                       gpointer     arg_6,
                                                                                       gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_STRING_BOXED_STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 7);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_STRING_BOXED_STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_boxed (param_values + 3),
                       g_marshal_value_peek_string (param_values + 4),
                       g_marshal_value_peek_string (param_values + 5),
                       g_marshal_value_peek_pointer (param_values + 6),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,STRING,POINTER */
extern void dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_POINTER (GClosure     *closure,
                                                                                  GValue       *return_value,
                                                                                  guint         n_param_values,
                                                                                  const GValue *param_values,
                                                                                  gpointer      invocation_hint,
                                                                                  gpointer      marshal_data);
void
dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_POINTER (GClosure     *closure,
                                                                      GValue       *return_value G_GNUC_UNUSED,
                                                                      guint         n_param_values,
                                                                      const GValue *param_values,
                                                                      gpointer      invocation_hint G_GNUC_UNUSED,
                                                                      gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_STRING_POINTER) (gpointer     data1,
                                                                   gpointer     arg_1,
                                                                   gpointer     arg_2,
                                                                   gpointer     arg_3,
                                                                   gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,BOXED,STRING,STRING,POINTER */
extern void dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_STRING_STRING_POINTER (GClosure     *closure,
                                                                                               GValue       *return_value,
                                                                                               guint         n_param_values,
                                                                                               const GValue *param_values,
                                                                                               gpointer      invocation_hint,
                                                                                               gpointer      marshal_data);
void
dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_STRING_STRING_POINTER (GClosure     *closure,
                                                                                   GValue       *return_value G_GNUC_UNUSED,
                                                                                   guint         n_param_values,
                                                                                   const GValue *param_values,
                                                                                   gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                   gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_BOXED_STRING_STRING_POINTER) (gpointer     data1,
                                                                                gpointer     arg_1,
                                                                                gpointer     arg_2,
                                                                                gpointer     arg_3,
                                                                                gpointer     arg_4,
                                                                                gpointer     arg_5,
                                                                                gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_BOXED_STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 6);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_BOXED_STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_boxed (param_values + 2),
                       g_marshal_value_peek_string (param_values + 3),
                       g_marshal_value_peek_string (param_values + 4),
                       g_marshal_value_peek_pointer (param_values + 5),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

G_END_DECLS

#endif /* __dbus_glib_marshal_thunar_dbus_service_MARSHAL_H__ */

#include <dbus/dbus-glib.h>
static const DBusGMethodInfo dbus_glib_thunar_dbus_service_methods[] = {
  { (GCallback) thunar_dbus_service_display_chooser_dialog, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOOLEAN_STRING_STRING_POINTER, 0 },
  { (GCallback) thunar_dbus_service_display_folder, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_STRING_POINTER, 89 },
  { (GCallback) thunar_dbus_service_display_folder_and_select, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_STRING_STRING_POINTER, 162 },
  { (GCallback) thunar_dbus_service_display_file_properties, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_STRING_POINTER, 257 },
  { (GCallback) thunar_dbus_service_launch, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_STRING_POINTER, 338 },
  { (GCallback) thunar_dbus_service_execute, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_BOXED_STRING_STRING_POINTER, 404 },
  { (GCallback) thunar_dbus_service_display_preferences_dialog, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_POINTER, 504 },
  { (GCallback) thunar_dbus_service_copy_to, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_BOXED_STRING_STRING_POINTER, 580 },
  { (GCallback) thunar_dbus_service_copy_into, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_STRING_STRING_STRING_POINTER, 704 },
  { (GCallback) thunar_dbus_service_move_into, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_STRING_STRING_STRING_POINTER, 828 },
  { (GCallback) thunar_dbus_service_link_into, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_STRING_STRING_STRING_POINTER, 952 },
  { (GCallback) thunar_dbus_service_unlink_files, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_STRING_STRING_POINTER, 1076 },
  { (GCallback) thunar_dbus_service_launch_files, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_STRING_STRING_POINTER, 1176 },
  { (GCallback) thunar_dbus_service_rename_file, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_STRING_POINTER, 1276 },
  { (GCallback) thunar_dbus_service_create_file, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_STRING_STRING_POINTER, 1351 },
  { (GCallback) thunar_dbus_service_create_file_from_template, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_STRING_STRING_POINTER, 1451 },
  { (GCallback) thunar_dbus_service_display_trash, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_POINTER, 1563 },
  { (GCallback) thunar_dbus_service_empty_trash, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_STRING_POINTER, 1621 },
  { (GCallback) thunar_dbus_service_move_to_trash, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__BOXED_STRING_STRING_POINTER, 1677 },
  { (GCallback) thunar_dbus_service_query_trash, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__POINTER_POINTER, 1749 },
  { (GCallback) thunar_dbus_service_bulk_rename, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__STRING_BOXED_BOOLEAN_STRING_STRING_POINTER, 1791 },
  { (GCallback) thunar_dbus_service_terminate, dbus_glib_marshal_thunar_dbus_service_BOOLEAN__POINTER, 1900 },
};

const DBusGObjectInfo dbus_glib_thunar_dbus_service_object_info = {  1,
  dbus_glib_thunar_dbus_service_methods,
  22,
"org.xfce.FileManager\0DisplayChooserDialog\0S\0uri\0I\0s\0open\0I\0b\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0DisplayFolder\0S\0uri\0I\0s\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0DisplayFolderAndSelect\0S\0uri\0I\0s\0filename\0I\0s\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0DisplayFileProperties\0S\0uri\0I\0s\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0Launch\0S\0uri\0I\0s\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0Execute\0S\0working_directory\0I\0s\0uri\0I\0s\0files\0I\0as\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0DisplayPreferencesDialog\0S\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0CopyTo\0S\0working_directory\0I\0s\0source_filenames\0I\0as\0target_filenames\0I\0as\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0CopyInto\0S\0working_directory\0I\0s\0source_filenames\0I\0as\0target_filename\0I\0s\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0MoveInto\0S\0working_directory\0I\0s\0source_filenames\0I\0as\0target_filename\0I\0s\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0LinkInto\0S\0working_directory\0I\0s\0source_filenames\0I\0as\0target_filename\0I\0s\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0UnlinkFiles\0S\0working_directory\0I\0s\0filenames\0I\0as\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0LaunchFiles\0S\0working_directory\0I\0s\0filenames\0I\0as\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0RenameFile\0S\0filename\0I\0s\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0CreateFile\0S\0parent_directory\0I\0s\0content_type\0I\0s\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.FileManager\0CreateFileFromTemplate\0S\0parent_directory\0I\0s\0template_uri\0I\0s\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.Trash\0DisplayTrash\0S\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.Trash\0EmptyTrash\0S\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.Trash\0MoveToTrash\0S\0filenames\0I\0as\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.Trash\0QueryTrash\0S\0full\0O\0F\0N\0b\0\0org.xfce.Thunar\0BulkRename\0S\0working_directory\0I\0s\0filenames\0I\0as\0standalone\0I\0b\0display\0I\0s\0startup_id\0I\0s\0\0org.xfce.Thunar\0Terminate\0S\0\0\0",
"org.xfce.Trash\0TrashChanged\0\0",
"\0"
};

