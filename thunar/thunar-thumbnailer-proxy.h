/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_thunar_thumbnailer_proxy
#define DBUS_GLIB_CLIENT_WRAPPERS_thunar_thumbnailer_proxy

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
thunar_thumbnailer_proxy_queue (DBusGProxy *proxy, const char ** IN_uris, const char ** IN_mime_hints, const char * IN_flavor, const char * IN_scheduler, const guint IN_handle_to_unqueue, guint* OUT_handle, GError **error)

{
  return dbus_g_proxy_call (proxy, "Queue", error, G_TYPE_STRV, IN_uris, G_TYPE_STRV, IN_mime_hints, G_TYPE_STRING, IN_flavor, G_TYPE_STRING, IN_scheduler, G_TYPE_UINT, IN_handle_to_unqueue, G_TYPE_INVALID, G_TYPE_UINT, OUT_handle, G_TYPE_INVALID);
}

typedef void (*thunar_thumbnailer_proxy_queue_reply) (DBusGProxy *proxy, guint OUT_handle, GError *error, gpointer userdata);

static void
thunar_thumbnailer_proxy_queue_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  guint OUT_handle;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_UINT, &OUT_handle, G_TYPE_INVALID);
  (*(thunar_thumbnailer_proxy_queue_reply)data->cb) (proxy, OUT_handle, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
thunar_thumbnailer_proxy_queue_async (DBusGProxy *proxy, const char ** IN_uris, const char ** IN_mime_hints, const char * IN_flavor, const char * IN_scheduler, const guint IN_handle_to_unqueue, thunar_thumbnailer_proxy_queue_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Queue", thunar_thumbnailer_proxy_queue_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRV, IN_uris, G_TYPE_STRV, IN_mime_hints, G_TYPE_STRING, IN_flavor, G_TYPE_STRING, IN_scheduler, G_TYPE_UINT, IN_handle_to_unqueue, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
thunar_thumbnailer_proxy_dequeue (DBusGProxy *proxy, const guint IN_handle, GError **error)

{
  return dbus_g_proxy_call (proxy, "Dequeue", error, G_TYPE_UINT, IN_handle, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*thunar_thumbnailer_proxy_dequeue_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
thunar_thumbnailer_proxy_dequeue_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(thunar_thumbnailer_proxy_dequeue_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
thunar_thumbnailer_proxy_dequeue_async (DBusGProxy *proxy, const guint IN_handle, thunar_thumbnailer_proxy_dequeue_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Dequeue", thunar_thumbnailer_proxy_dequeue_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_UINT, IN_handle, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
thunar_thumbnailer_proxy_get_supported (DBusGProxy *proxy, char *** OUT_uri_schemes, char *** OUT_mime_types, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetSupported", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_uri_schemes, G_TYPE_STRV, OUT_mime_types, G_TYPE_INVALID);
}

typedef void (*thunar_thumbnailer_proxy_get_supported_reply) (DBusGProxy *proxy, char * *OUT_uri_schemes, char * *OUT_mime_types, GError *error, gpointer userdata);

static void
thunar_thumbnailer_proxy_get_supported_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_uri_schemes;
  char ** OUT_mime_types;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_uri_schemes, G_TYPE_STRV, &OUT_mime_types, G_TYPE_INVALID);
  (*(thunar_thumbnailer_proxy_get_supported_reply)data->cb) (proxy, OUT_uri_schemes, OUT_mime_types, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
thunar_thumbnailer_proxy_get_supported_async (DBusGProxy *proxy, thunar_thumbnailer_proxy_get_supported_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetSupported", thunar_thumbnailer_proxy_get_supported_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
thunar_thumbnailer_proxy_get_schedulers (DBusGProxy *proxy, char *** OUT_schedulers, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetSchedulers", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_schedulers, G_TYPE_INVALID);
}

typedef void (*thunar_thumbnailer_proxy_get_schedulers_reply) (DBusGProxy *proxy, char * *OUT_schedulers, GError *error, gpointer userdata);

static void
thunar_thumbnailer_proxy_get_schedulers_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_schedulers;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_schedulers, G_TYPE_INVALID);
  (*(thunar_thumbnailer_proxy_get_schedulers_reply)data->cb) (proxy, OUT_schedulers, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
thunar_thumbnailer_proxy_get_schedulers_async (DBusGProxy *proxy, thunar_thumbnailer_proxy_get_schedulers_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetSchedulers", thunar_thumbnailer_proxy_get_schedulers_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_thunar_thumbnailer_proxy */

G_END_DECLS
